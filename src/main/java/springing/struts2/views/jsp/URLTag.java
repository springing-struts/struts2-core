package springing.struts2.views.jsp;

import jakarta.servlet.jsp.JspException;
import jakarta.servlet.jsp.PageContext;
import jakarta.servlet.jsp.tagext.IterationTag;
import jakarta.servlet.jsp.tagext.Tag;
import jakarta.servlet.jsp.tagext.TryCatchFinally;
import org.springframework.lang.Nullable;
import org.springframework.web.servlet.tags.UrlTag;
import springing.struts2.action.ActionController;

/**
 * This tag is used to create a URL.
 * You can use the <param> tag inside the body to provide
 * additional request parameters. If the value of a param is an Array or
 * an Iterable all the values will be added to the URL.
 * NOTE:
 * By default request parameters will be separated using escaped ampersands (i.e., &).
 * This is necessary for XHTML compliance, however, when using the URL generated by this tag
 * with the &lt;s:property&gt; tag, the <b>escapeAmp</b> attribute should be used to disable
 * ampersand escaping.
 * NOTE:
 * When includeParams is 'all' or 'get', the parameter defined in a <param>
 * tag will take precedence over any params included due to the includeParams attribute. For
 * example, in Example 3 below, if there is a id parameter in the url where the page this
 * tag is included like http://<host>:<port>/<context>/editUser.action?id=3333&name=John
 * the generated url will be http://<host><:<port>/<context>/editUser.action?id=22&name=John
 * because the parameter defined in the param tag will take precedence.
 * ==========
 * Properties
 * ==========
 * - action (String)
 *   (value or action choose either one, if both exist value takes precedence)
 *   action's name (alias)
 * - value (String)
 *   (value or action choose either one, if both exist value takes precedence)
 *   the url itself
 * - scheme (String)
 *   http scheme (http, https) defaults to the scheme this request is in
 * - namespace
 *   action's namespace
 * - method (String)
 *   action's method name, defaults to 'execute'
 * - encode (Boolean)
 *   url encode the generated url. Defaults to 'true'.
 * - includeParams (String)
 *   The includeParams attribute may have the value 'none', 'get' or 'all'. Defaults to 'none'.
 *     none: include no parameters in the URL (default)
 *     get: include only GET parameters in the URL
 *     all: include both GET and POST parameters in the URL
 * - includeContext (Boolean)
 *   Specifies whether to include the web app context path. Defaults to 'true'.
 * - escapeAmp (Boolean)
 *   Specifies whether to escape ampersand (&amp;) to (&amp;amp;) or not. Defaults to 'true'.
 * - portletMode (String)
 *   The resulting portlet mode.
 * - windowState (String)
 *   The resulting portlet window state.
 * - portletUrlType (String)
 *   Specifies if this should be a portlet render or action URL.
 * - forceAddSchemeHostAndPort (Boolean)
 *   Specifies whether to force the addition of scheme, host and port or not.
 * =================
 * Examples
 * =================
 * <pre>
 *
 * Example 1
 * <s:url value="editGadget.action>
 *   <s:param name="id" value="%{selected}" />
 * </s:url>
 *
 * Example 2
 * <s:url action="editGadget">
 *   <s:param name="id" value="%{selected}" />
 * </s:url>
 *
 * Example 3
 * <s:url includeParams="get">
 *   <s:param name="id" value="%{'22'}" />
 * </s:url>
 *
 * </pre>
 */
public class URLTag implements IterationTag, TryCatchFinally {

  public URLTag() {
    this.urlTag = new UrlTag();
  }
  private final UrlTag urlTag;

  private String includeParams;
  private String scheme;
  private String value;

  private @Nullable String action;
  public void setAction(String action) {
    this.action = action;
  }

  private String namespace;
  private String method;
  private String encode;
  public void setEncode(String encode) {
    this.encode = encode;
  }

  private String includeContext;
  private String escapeAmp;
  private String portletMode;
  private String windowState;
  private String portletUrlType;
  private String anchor;
  private String forceAddSchemeHostAndPort;


  public void setIncludeContext(String includeContext) {
    this.includeContext = includeContext;
  }

  public void setEscapeAmp(String escapeAmp) {
    this.escapeAmp = escapeAmp;
  }

  public void setIncludeParams(String name) {
    includeParams = name;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public void setMethod(String method) {
    this.method = method;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public void setPortletMode(String portletMode) {
    this.portletMode = portletMode;
  }

  public void setPortletUrlType(String portletUrlType) {
    this.portletUrlType = portletUrlType;
  }

  public void setWindowState(String windowState) {
    this.windowState = windowState;
  }

  public void setAnchor(String anchor) {
    this.anchor = anchor;
  }

  public void setForceAddSchemeHostAndPort(String forceAddSchemeHostAndPort) {
    this.forceAddSchemeHostAndPort = forceAddSchemeHostAndPort;
  }

  @Override
  public int doStartTag() throws JspException {
    assert pageContext != null;
    var config = ActionController.currentConfig();
    var targetAction = config.getPackageConfig().findActionConfigByName(action);
    if (targetAction == null) throw new RuntimeException(
      "Unknown action name: " + action
    );
    urlTag.setValue(targetAction.getName());
    return urlTag.doStartTag();
  }

  @Override
  public void setPageContext(PageContext pageContext) {
    urlTag.setPageContext(pageContext);
    this.pageContext = pageContext;
  }
  private @Nullable PageContext pageContext = null;

  @Override
  public int doAfterBody() throws JspException {
    return urlTag.doAfterBody();
  }

  @Override
  public void setParent(Tag tag) {
    urlTag.setParent(tag);
  }

  @Override
  public Tag getParent() {
    return urlTag.getParent();
  }


  @Override
  public int doEndTag() throws JspException {
    return urlTag.doEndTag();
  }

  @Override
  public void release() {
    urlTag.release();
  }

  @Override
  public void doCatch(Throwable throwable) throws Throwable {
    urlTag.doCatch(throwable);
  }

  @Override
  public void doFinally() {
    urlTag.doFinally();
  }

  /*
  @Override
  public Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {
    return new URL(stack, req, res);
  }
   */

  /*
  @Override
  protected void populateParams() {
    super.populateParams();

    URL url = (URL) component;
    url.setIncludeParams(includeParams);
    url.setScheme(scheme);
    url.setValue(value);
    url.setMethod(method);
    url.setNamespace(namespace);
    url.setAction(action);
    url.setPortletMode(portletMode);
    url.setPortletUrlType(portletUrlType);
    url.setWindowState(windowState);
    url.setAnchor(anchor);

    if (encode != null) {
      url.setEncode(Boolean.valueOf(encode).booleanValue());
    }
    if (includeContext != null) {
      url.setIncludeContext(Boolean.valueOf(includeContext).booleanValue());
    }
    if (escapeAmp != null) {
      url.setEscapeAmp(Boolean.valueOf(escapeAmp).booleanValue());
    }
    if (forceAddSchemeHostAndPort != null) {
      url.setForceAddSchemeHostAndPort(Boolean.valueOf(forceAddSchemeHostAndPort).booleanValue());
    }
  }
  */

  /**
   * Must declare the setter at the descendant Tag class level in order for the tag handler to locate the method.
   */

  /*
  @Override
  public void setPerformClearTagStateForTagPoolingServers(boolean performClearTagStateForTagPoolingServers) {
    super.setPerformClearTagStateForTagPoolingServers(performClearTagStateForTagPoolingServers);
  }
  */

/*
  @Override
  protected void clearTagStateForTagPoolingServers() {
    if (getPerformClearTagStateForTagPoolingServers() == false) {
      return;  // If flag is false (default setting), do not perform any state clearing.
    }
    super.clearTagStateForTagPoolingServers();
    this.includeParams = null;
    this.scheme = null;
    this.value = null;
    this.action = null;
    this.namespace = null;
    this.method = null;
    this.encode = null;
    this.includeContext = null;
    this.escapeAmp = null;
    this.portletMode = null;
    this.windowState = null;
    this.portletUrlType = null;
    this.anchor = null;
    this.forceAddSchemeHostAndPort = null;
  }
  */
  /*
  @Override
  public void addParam(Param param) {

  }
  */
}